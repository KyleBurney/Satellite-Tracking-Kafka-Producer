/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.satellite.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SatelliteTleUpdateEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4814871657016573211L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SatelliteTleUpdateEvent\",\"namespace\":\"com.satellite.avro\",\"fields\":[{\"name\":\"satelliteId\",\"type\":\"string\"},{\"name\":\"satelliteName\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"line1\",\"type\":\"string\"},{\"name\":\"line2\",\"type\":\"string\"},{\"name\":\"epochYear\",\"type\":\"int\"},{\"name\":\"epochDay\",\"type\":\"double\"},{\"name\":\"meanMotion\",\"type\":\"double\"},{\"name\":\"eccentricity\",\"type\":\"double\"},{\"name\":\"inclination\",\"type\":\"double\"},{\"name\":\"source\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SatelliteTleUpdateEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SatelliteTleUpdateEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SatelliteTleUpdateEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SatelliteTleUpdateEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SatelliteTleUpdateEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SatelliteTleUpdateEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SatelliteTleUpdateEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SatelliteTleUpdateEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SatelliteTleUpdateEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence satelliteId;
  private java.lang.CharSequence satelliteName;
  private long timestamp;
  private java.lang.CharSequence line1;
  private java.lang.CharSequence line2;
  private int epochYear;
  private double epochDay;
  private double meanMotion;
  private double eccentricity;
  private double inclination;
  private java.lang.CharSequence source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SatelliteTleUpdateEvent() {}

  /**
   * All-args constructor.
   * @param satelliteId The new value for satelliteId
   * @param satelliteName The new value for satelliteName
   * @param timestamp The new value for timestamp
   * @param line1 The new value for line1
   * @param line2 The new value for line2
   * @param epochYear The new value for epochYear
   * @param epochDay The new value for epochDay
   * @param meanMotion The new value for meanMotion
   * @param eccentricity The new value for eccentricity
   * @param inclination The new value for inclination
   * @param source The new value for source
   */
  public SatelliteTleUpdateEvent(java.lang.CharSequence satelliteId, java.lang.CharSequence satelliteName, java.lang.Long timestamp, java.lang.CharSequence line1, java.lang.CharSequence line2, java.lang.Integer epochYear, java.lang.Double epochDay, java.lang.Double meanMotion, java.lang.Double eccentricity, java.lang.Double inclination, java.lang.CharSequence source) {
    this.satelliteId = satelliteId;
    this.satelliteName = satelliteName;
    this.timestamp = timestamp;
    this.line1 = line1;
    this.line2 = line2;
    this.epochYear = epochYear;
    this.epochDay = epochDay;
    this.meanMotion = meanMotion;
    this.eccentricity = eccentricity;
    this.inclination = inclination;
    this.source = source;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return satelliteId;
    case 1: return satelliteName;
    case 2: return timestamp;
    case 3: return line1;
    case 4: return line2;
    case 5: return epochYear;
    case 6: return epochDay;
    case 7: return meanMotion;
    case 8: return eccentricity;
    case 9: return inclination;
    case 10: return source;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: satelliteId = (java.lang.CharSequence)value$; break;
    case 1: satelliteName = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: line1 = (java.lang.CharSequence)value$; break;
    case 4: line2 = (java.lang.CharSequence)value$; break;
    case 5: epochYear = (java.lang.Integer)value$; break;
    case 6: epochDay = (java.lang.Double)value$; break;
    case 7: meanMotion = (java.lang.Double)value$; break;
    case 8: eccentricity = (java.lang.Double)value$; break;
    case 9: inclination = (java.lang.Double)value$; break;
    case 10: source = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'satelliteId' field.
   * @return The value of the 'satelliteId' field.
   */
  public java.lang.CharSequence getSatelliteId() {
    return satelliteId;
  }


  /**
   * Sets the value of the 'satelliteId' field.
   * @param value the value to set.
   */
  public void setSatelliteId(java.lang.CharSequence value) {
    this.satelliteId = value;
  }

  /**
   * Gets the value of the 'satelliteName' field.
   * @return The value of the 'satelliteName' field.
   */
  public java.lang.CharSequence getSatelliteName() {
    return satelliteName;
  }


  /**
   * Sets the value of the 'satelliteName' field.
   * @param value the value to set.
   */
  public void setSatelliteName(java.lang.CharSequence value) {
    this.satelliteName = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'line1' field.
   * @return The value of the 'line1' field.
   */
  public java.lang.CharSequence getLine1() {
    return line1;
  }


  /**
   * Sets the value of the 'line1' field.
   * @param value the value to set.
   */
  public void setLine1(java.lang.CharSequence value) {
    this.line1 = value;
  }

  /**
   * Gets the value of the 'line2' field.
   * @return The value of the 'line2' field.
   */
  public java.lang.CharSequence getLine2() {
    return line2;
  }


  /**
   * Sets the value of the 'line2' field.
   * @param value the value to set.
   */
  public void setLine2(java.lang.CharSequence value) {
    this.line2 = value;
  }

  /**
   * Gets the value of the 'epochYear' field.
   * @return The value of the 'epochYear' field.
   */
  public int getEpochYear() {
    return epochYear;
  }


  /**
   * Sets the value of the 'epochYear' field.
   * @param value the value to set.
   */
  public void setEpochYear(int value) {
    this.epochYear = value;
  }

  /**
   * Gets the value of the 'epochDay' field.
   * @return The value of the 'epochDay' field.
   */
  public double getEpochDay() {
    return epochDay;
  }


  /**
   * Sets the value of the 'epochDay' field.
   * @param value the value to set.
   */
  public void setEpochDay(double value) {
    this.epochDay = value;
  }

  /**
   * Gets the value of the 'meanMotion' field.
   * @return The value of the 'meanMotion' field.
   */
  public double getMeanMotion() {
    return meanMotion;
  }


  /**
   * Sets the value of the 'meanMotion' field.
   * @param value the value to set.
   */
  public void setMeanMotion(double value) {
    this.meanMotion = value;
  }

  /**
   * Gets the value of the 'eccentricity' field.
   * @return The value of the 'eccentricity' field.
   */
  public double getEccentricity() {
    return eccentricity;
  }


  /**
   * Sets the value of the 'eccentricity' field.
   * @param value the value to set.
   */
  public void setEccentricity(double value) {
    this.eccentricity = value;
  }

  /**
   * Gets the value of the 'inclination' field.
   * @return The value of the 'inclination' field.
   */
  public double getInclination() {
    return inclination;
  }


  /**
   * Sets the value of the 'inclination' field.
   * @param value the value to set.
   */
  public void setInclination(double value) {
    this.inclination = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Creates a new SatelliteTleUpdateEvent RecordBuilder.
   * @return A new SatelliteTleUpdateEvent RecordBuilder
   */
  public static com.satellite.avro.SatelliteTleUpdateEvent.Builder newBuilder() {
    return new com.satellite.avro.SatelliteTleUpdateEvent.Builder();
  }

  /**
   * Creates a new SatelliteTleUpdateEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SatelliteTleUpdateEvent RecordBuilder
   */
  public static com.satellite.avro.SatelliteTleUpdateEvent.Builder newBuilder(com.satellite.avro.SatelliteTleUpdateEvent.Builder other) {
    if (other == null) {
      return new com.satellite.avro.SatelliteTleUpdateEvent.Builder();
    } else {
      return new com.satellite.avro.SatelliteTleUpdateEvent.Builder(other);
    }
  }

  /**
   * Creates a new SatelliteTleUpdateEvent RecordBuilder by copying an existing SatelliteTleUpdateEvent instance.
   * @param other The existing instance to copy.
   * @return A new SatelliteTleUpdateEvent RecordBuilder
   */
  public static com.satellite.avro.SatelliteTleUpdateEvent.Builder newBuilder(com.satellite.avro.SatelliteTleUpdateEvent other) {
    if (other == null) {
      return new com.satellite.avro.SatelliteTleUpdateEvent.Builder();
    } else {
      return new com.satellite.avro.SatelliteTleUpdateEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for SatelliteTleUpdateEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SatelliteTleUpdateEvent>
    implements org.apache.avro.data.RecordBuilder<SatelliteTleUpdateEvent> {

    private java.lang.CharSequence satelliteId;
    private java.lang.CharSequence satelliteName;
    private long timestamp;
    private java.lang.CharSequence line1;
    private java.lang.CharSequence line2;
    private int epochYear;
    private double epochDay;
    private double meanMotion;
    private double eccentricity;
    private double inclination;
    private java.lang.CharSequence source;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.satellite.avro.SatelliteTleUpdateEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.satelliteId)) {
        this.satelliteId = data().deepCopy(fields()[0].schema(), other.satelliteId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.satelliteName)) {
        this.satelliteName = data().deepCopy(fields()[1].schema(), other.satelliteName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.line1)) {
        this.line1 = data().deepCopy(fields()[3].schema(), other.line1);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.line2)) {
        this.line2 = data().deepCopy(fields()[4].schema(), other.line2);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.epochYear)) {
        this.epochYear = data().deepCopy(fields()[5].schema(), other.epochYear);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.epochDay)) {
        this.epochDay = data().deepCopy(fields()[6].schema(), other.epochDay);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.meanMotion)) {
        this.meanMotion = data().deepCopy(fields()[7].schema(), other.meanMotion);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.eccentricity)) {
        this.eccentricity = data().deepCopy(fields()[8].schema(), other.eccentricity);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.inclination)) {
        this.inclination = data().deepCopy(fields()[9].schema(), other.inclination);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.source)) {
        this.source = data().deepCopy(fields()[10].schema(), other.source);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing SatelliteTleUpdateEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.satellite.avro.SatelliteTleUpdateEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.satelliteId)) {
        this.satelliteId = data().deepCopy(fields()[0].schema(), other.satelliteId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.satelliteName)) {
        this.satelliteName = data().deepCopy(fields()[1].schema(), other.satelliteName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.line1)) {
        this.line1 = data().deepCopy(fields()[3].schema(), other.line1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.line2)) {
        this.line2 = data().deepCopy(fields()[4].schema(), other.line2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.epochYear)) {
        this.epochYear = data().deepCopy(fields()[5].schema(), other.epochYear);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.epochDay)) {
        this.epochDay = data().deepCopy(fields()[6].schema(), other.epochDay);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.meanMotion)) {
        this.meanMotion = data().deepCopy(fields()[7].schema(), other.meanMotion);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.eccentricity)) {
        this.eccentricity = data().deepCopy(fields()[8].schema(), other.eccentricity);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.inclination)) {
        this.inclination = data().deepCopy(fields()[9].schema(), other.inclination);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.source)) {
        this.source = data().deepCopy(fields()[10].schema(), other.source);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'satelliteId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSatelliteId() {
      return satelliteId;
    }


    /**
      * Sets the value of the 'satelliteId' field.
      * @param value The value of 'satelliteId'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setSatelliteId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.satelliteId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'satelliteId' field has been set.
      * @return True if the 'satelliteId' field has been set, false otherwise.
      */
    public boolean hasSatelliteId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'satelliteId' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearSatelliteId() {
      satelliteId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'satelliteName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSatelliteName() {
      return satelliteName;
    }


    /**
      * Sets the value of the 'satelliteName' field.
      * @param value The value of 'satelliteName'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setSatelliteName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.satelliteName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'satelliteName' field has been set.
      * @return True if the 'satelliteName' field has been set, false otherwise.
      */
    public boolean hasSatelliteName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'satelliteName' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearSatelliteName() {
      satelliteName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'line1' field.
      * @return The value.
      */
    public java.lang.CharSequence getLine1() {
      return line1;
    }


    /**
      * Sets the value of the 'line1' field.
      * @param value The value of 'line1'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setLine1(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.line1 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'line1' field has been set.
      * @return True if the 'line1' field has been set, false otherwise.
      */
    public boolean hasLine1() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'line1' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearLine1() {
      line1 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'line2' field.
      * @return The value.
      */
    public java.lang.CharSequence getLine2() {
      return line2;
    }


    /**
      * Sets the value of the 'line2' field.
      * @param value The value of 'line2'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setLine2(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.line2 = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'line2' field has been set.
      * @return True if the 'line2' field has been set, false otherwise.
      */
    public boolean hasLine2() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'line2' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearLine2() {
      line2 = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'epochYear' field.
      * @return The value.
      */
    public int getEpochYear() {
      return epochYear;
    }


    /**
      * Sets the value of the 'epochYear' field.
      * @param value The value of 'epochYear'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setEpochYear(int value) {
      validate(fields()[5], value);
      this.epochYear = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'epochYear' field has been set.
      * @return True if the 'epochYear' field has been set, false otherwise.
      */
    public boolean hasEpochYear() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'epochYear' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearEpochYear() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'epochDay' field.
      * @return The value.
      */
    public double getEpochDay() {
      return epochDay;
    }


    /**
      * Sets the value of the 'epochDay' field.
      * @param value The value of 'epochDay'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setEpochDay(double value) {
      validate(fields()[6], value);
      this.epochDay = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'epochDay' field has been set.
      * @return True if the 'epochDay' field has been set, false otherwise.
      */
    public boolean hasEpochDay() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'epochDay' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearEpochDay() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'meanMotion' field.
      * @return The value.
      */
    public double getMeanMotion() {
      return meanMotion;
    }


    /**
      * Sets the value of the 'meanMotion' field.
      * @param value The value of 'meanMotion'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setMeanMotion(double value) {
      validate(fields()[7], value);
      this.meanMotion = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'meanMotion' field has been set.
      * @return True if the 'meanMotion' field has been set, false otherwise.
      */
    public boolean hasMeanMotion() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'meanMotion' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearMeanMotion() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'eccentricity' field.
      * @return The value.
      */
    public double getEccentricity() {
      return eccentricity;
    }


    /**
      * Sets the value of the 'eccentricity' field.
      * @param value The value of 'eccentricity'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setEccentricity(double value) {
      validate(fields()[8], value);
      this.eccentricity = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'eccentricity' field has been set.
      * @return True if the 'eccentricity' field has been set, false otherwise.
      */
    public boolean hasEccentricity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'eccentricity' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearEccentricity() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'inclination' field.
      * @return The value.
      */
    public double getInclination() {
      return inclination;
    }


    /**
      * Sets the value of the 'inclination' field.
      * @param value The value of 'inclination'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setInclination(double value) {
      validate(fields()[9], value);
      this.inclination = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'inclination' field has been set.
      * @return True if the 'inclination' field has been set, false otherwise.
      */
    public boolean hasInclination() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'inclination' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearInclination() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.source = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.satellite.avro.SatelliteTleUpdateEvent.Builder clearSource() {
      source = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SatelliteTleUpdateEvent build() {
      try {
        SatelliteTleUpdateEvent record = new SatelliteTleUpdateEvent();
        record.satelliteId = fieldSetFlags()[0] ? this.satelliteId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.satelliteName = fieldSetFlags()[1] ? this.satelliteName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.line1 = fieldSetFlags()[3] ? this.line1 : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.line2 = fieldSetFlags()[4] ? this.line2 : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.epochYear = fieldSetFlags()[5] ? this.epochYear : (java.lang.Integer) defaultValue(fields()[5]);
        record.epochDay = fieldSetFlags()[6] ? this.epochDay : (java.lang.Double) defaultValue(fields()[6]);
        record.meanMotion = fieldSetFlags()[7] ? this.meanMotion : (java.lang.Double) defaultValue(fields()[7]);
        record.eccentricity = fieldSetFlags()[8] ? this.eccentricity : (java.lang.Double) defaultValue(fields()[8]);
        record.inclination = fieldSetFlags()[9] ? this.inclination : (java.lang.Double) defaultValue(fields()[9]);
        record.source = fieldSetFlags()[10] ? this.source : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SatelliteTleUpdateEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<SatelliteTleUpdateEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SatelliteTleUpdateEvent>
    READER$ = (org.apache.avro.io.DatumReader<SatelliteTleUpdateEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.satelliteId);

    out.writeString(this.satelliteName);

    out.writeLong(this.timestamp);

    out.writeString(this.line1);

    out.writeString(this.line2);

    out.writeInt(this.epochYear);

    out.writeDouble(this.epochDay);

    out.writeDouble(this.meanMotion);

    out.writeDouble(this.eccentricity);

    out.writeDouble(this.inclination);

    out.writeString(this.source);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.satelliteId = in.readString(this.satelliteId instanceof Utf8 ? (Utf8)this.satelliteId : null);

      this.satelliteName = in.readString(this.satelliteName instanceof Utf8 ? (Utf8)this.satelliteName : null);

      this.timestamp = in.readLong();

      this.line1 = in.readString(this.line1 instanceof Utf8 ? (Utf8)this.line1 : null);

      this.line2 = in.readString(this.line2 instanceof Utf8 ? (Utf8)this.line2 : null);

      this.epochYear = in.readInt();

      this.epochDay = in.readDouble();

      this.meanMotion = in.readDouble();

      this.eccentricity = in.readDouble();

      this.inclination = in.readDouble();

      this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.satelliteId = in.readString(this.satelliteId instanceof Utf8 ? (Utf8)this.satelliteId : null);
          break;

        case 1:
          this.satelliteName = in.readString(this.satelliteName instanceof Utf8 ? (Utf8)this.satelliteName : null);
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.line1 = in.readString(this.line1 instanceof Utf8 ? (Utf8)this.line1 : null);
          break;

        case 4:
          this.line2 = in.readString(this.line2 instanceof Utf8 ? (Utf8)this.line2 : null);
          break;

        case 5:
          this.epochYear = in.readInt();
          break;

        case 6:
          this.epochDay = in.readDouble();
          break;

        case 7:
          this.meanMotion = in.readDouble();
          break;

        case 8:
          this.eccentricity = in.readDouble();
          break;

        case 9:
          this.inclination = in.readDouble();
          break;

        case 10:
          this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










