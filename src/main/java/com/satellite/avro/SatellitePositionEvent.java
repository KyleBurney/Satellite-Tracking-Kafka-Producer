/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.satellite.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SatellitePositionEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3401277761637580357L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SatellitePositionEvent\",\"namespace\":\"com.satellite.avro\",\"fields\":[{\"name\":\"satelliteId\",\"type\":\"string\"},{\"name\":\"satelliteName\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"altitude\",\"type\":\"double\"},{\"name\":\"velocity\",\"type\":\"double\"},{\"name\":\"source\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SatellitePositionEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SatellitePositionEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SatellitePositionEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SatellitePositionEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SatellitePositionEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SatellitePositionEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SatellitePositionEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SatellitePositionEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SatellitePositionEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence satelliteId;
  private java.lang.CharSequence satelliteName;
  private long timestamp;
  private double latitude;
  private double longitude;
  private double altitude;
  private double velocity;
  private java.lang.CharSequence source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SatellitePositionEvent() {}

  /**
   * All-args constructor.
   * @param satelliteId The new value for satelliteId
   * @param satelliteName The new value for satelliteName
   * @param timestamp The new value for timestamp
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param altitude The new value for altitude
   * @param velocity The new value for velocity
   * @param source The new value for source
   */
  public SatellitePositionEvent(java.lang.CharSequence satelliteId, java.lang.CharSequence satelliteName, java.lang.Long timestamp, java.lang.Double latitude, java.lang.Double longitude, java.lang.Double altitude, java.lang.Double velocity, java.lang.CharSequence source) {
    this.satelliteId = satelliteId;
    this.satelliteName = satelliteName;
    this.timestamp = timestamp;
    this.latitude = latitude;
    this.longitude = longitude;
    this.altitude = altitude;
    this.velocity = velocity;
    this.source = source;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return satelliteId;
    case 1: return satelliteName;
    case 2: return timestamp;
    case 3: return latitude;
    case 4: return longitude;
    case 5: return altitude;
    case 6: return velocity;
    case 7: return source;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: satelliteId = (java.lang.CharSequence)value$; break;
    case 1: satelliteName = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: latitude = (java.lang.Double)value$; break;
    case 4: longitude = (java.lang.Double)value$; break;
    case 5: altitude = (java.lang.Double)value$; break;
    case 6: velocity = (java.lang.Double)value$; break;
    case 7: source = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'satelliteId' field.
   * @return The value of the 'satelliteId' field.
   */
  public java.lang.CharSequence getSatelliteId() {
    return satelliteId;
  }


  /**
   * Sets the value of the 'satelliteId' field.
   * @param value the value to set.
   */
  public void setSatelliteId(java.lang.CharSequence value) {
    this.satelliteId = value;
  }

  /**
   * Gets the value of the 'satelliteName' field.
   * @return The value of the 'satelliteName' field.
   */
  public java.lang.CharSequence getSatelliteName() {
    return satelliteName;
  }


  /**
   * Sets the value of the 'satelliteName' field.
   * @param value the value to set.
   */
  public void setSatelliteName(java.lang.CharSequence value) {
    this.satelliteName = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return The value of the 'altitude' field.
   */
  public double getAltitude() {
    return altitude;
  }


  /**
   * Sets the value of the 'altitude' field.
   * @param value the value to set.
   */
  public void setAltitude(double value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   * @return The value of the 'velocity' field.
   */
  public double getVelocity() {
    return velocity;
  }


  /**
   * Sets the value of the 'velocity' field.
   * @param value the value to set.
   */
  public void setVelocity(double value) {
    this.velocity = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Creates a new SatellitePositionEvent RecordBuilder.
   * @return A new SatellitePositionEvent RecordBuilder
   */
  public static com.satellite.avro.SatellitePositionEvent.Builder newBuilder() {
    return new com.satellite.avro.SatellitePositionEvent.Builder();
  }

  /**
   * Creates a new SatellitePositionEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SatellitePositionEvent RecordBuilder
   */
  public static com.satellite.avro.SatellitePositionEvent.Builder newBuilder(com.satellite.avro.SatellitePositionEvent.Builder other) {
    if (other == null) {
      return new com.satellite.avro.SatellitePositionEvent.Builder();
    } else {
      return new com.satellite.avro.SatellitePositionEvent.Builder(other);
    }
  }

  /**
   * Creates a new SatellitePositionEvent RecordBuilder by copying an existing SatellitePositionEvent instance.
   * @param other The existing instance to copy.
   * @return A new SatellitePositionEvent RecordBuilder
   */
  public static com.satellite.avro.SatellitePositionEvent.Builder newBuilder(com.satellite.avro.SatellitePositionEvent other) {
    if (other == null) {
      return new com.satellite.avro.SatellitePositionEvent.Builder();
    } else {
      return new com.satellite.avro.SatellitePositionEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for SatellitePositionEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SatellitePositionEvent>
    implements org.apache.avro.data.RecordBuilder<SatellitePositionEvent> {

    private java.lang.CharSequence satelliteId;
    private java.lang.CharSequence satelliteName;
    private long timestamp;
    private double latitude;
    private double longitude;
    private double altitude;
    private double velocity;
    private java.lang.CharSequence source;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.satellite.avro.SatellitePositionEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.satelliteId)) {
        this.satelliteId = data().deepCopy(fields()[0].schema(), other.satelliteId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.satelliteName)) {
        this.satelliteName = data().deepCopy(fields()[1].schema(), other.satelliteName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.altitude)) {
        this.altitude = data().deepCopy(fields()[5].schema(), other.altitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.velocity)) {
        this.velocity = data().deepCopy(fields()[6].schema(), other.velocity);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.source)) {
        this.source = data().deepCopy(fields()[7].schema(), other.source);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing SatellitePositionEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.satellite.avro.SatellitePositionEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.satelliteId)) {
        this.satelliteId = data().deepCopy(fields()[0].schema(), other.satelliteId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.satelliteName)) {
        this.satelliteName = data().deepCopy(fields()[1].schema(), other.satelliteName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.altitude)) {
        this.altitude = data().deepCopy(fields()[5].schema(), other.altitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.velocity)) {
        this.velocity = data().deepCopy(fields()[6].schema(), other.velocity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.source)) {
        this.source = data().deepCopy(fields()[7].schema(), other.source);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'satelliteId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSatelliteId() {
      return satelliteId;
    }


    /**
      * Sets the value of the 'satelliteId' field.
      * @param value The value of 'satelliteId'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setSatelliteId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.satelliteId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'satelliteId' field has been set.
      * @return True if the 'satelliteId' field has been set, false otherwise.
      */
    public boolean hasSatelliteId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'satelliteId' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearSatelliteId() {
      satelliteId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'satelliteName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSatelliteName() {
      return satelliteName;
    }


    /**
      * Sets the value of the 'satelliteName' field.
      * @param value The value of 'satelliteName'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setSatelliteName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.satelliteName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'satelliteName' field has been set.
      * @return True if the 'satelliteName' field has been set, false otherwise.
      */
    public boolean hasSatelliteName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'satelliteName' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearSatelliteName() {
      satelliteName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setLatitude(double value) {
      validate(fields()[3], value);
      this.latitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearLatitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setLongitude(double value) {
      validate(fields()[4], value);
      this.longitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearLongitude() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * @return The value.
      */
    public double getAltitude() {
      return altitude;
    }


    /**
      * Sets the value of the 'altitude' field.
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setAltitude(double value) {
      validate(fields()[5], value);
      this.altitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'altitude' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearAltitude() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'velocity' field.
      * @return The value.
      */
    public double getVelocity() {
      return velocity;
    }


    /**
      * Sets the value of the 'velocity' field.
      * @param value The value of 'velocity'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setVelocity(double value) {
      validate(fields()[6], value);
      this.velocity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'velocity' field has been set.
      * @return True if the 'velocity' field has been set, false otherwise.
      */
    public boolean hasVelocity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'velocity' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearVelocity() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.source = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePositionEvent.Builder clearSource() {
      source = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SatellitePositionEvent build() {
      try {
        SatellitePositionEvent record = new SatellitePositionEvent();
        record.satelliteId = fieldSetFlags()[0] ? this.satelliteId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.satelliteName = fieldSetFlags()[1] ? this.satelliteName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.Double) defaultValue(fields()[3]);
        record.longitude = fieldSetFlags()[4] ? this.longitude : (java.lang.Double) defaultValue(fields()[4]);
        record.altitude = fieldSetFlags()[5] ? this.altitude : (java.lang.Double) defaultValue(fields()[5]);
        record.velocity = fieldSetFlags()[6] ? this.velocity : (java.lang.Double) defaultValue(fields()[6]);
        record.source = fieldSetFlags()[7] ? this.source : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SatellitePositionEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<SatellitePositionEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SatellitePositionEvent>
    READER$ = (org.apache.avro.io.DatumReader<SatellitePositionEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.satelliteId);

    out.writeString(this.satelliteName);

    out.writeLong(this.timestamp);

    out.writeDouble(this.latitude);

    out.writeDouble(this.longitude);

    out.writeDouble(this.altitude);

    out.writeDouble(this.velocity);

    out.writeString(this.source);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.satelliteId = in.readString(this.satelliteId instanceof Utf8 ? (Utf8)this.satelliteId : null);

      this.satelliteName = in.readString(this.satelliteName instanceof Utf8 ? (Utf8)this.satelliteName : null);

      this.timestamp = in.readLong();

      this.latitude = in.readDouble();

      this.longitude = in.readDouble();

      this.altitude = in.readDouble();

      this.velocity = in.readDouble();

      this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.satelliteId = in.readString(this.satelliteId instanceof Utf8 ? (Utf8)this.satelliteId : null);
          break;

        case 1:
          this.satelliteName = in.readString(this.satelliteName instanceof Utf8 ? (Utf8)this.satelliteName : null);
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.latitude = in.readDouble();
          break;

        case 4:
          this.longitude = in.readDouble();
          break;

        case 5:
          this.altitude = in.readDouble();
          break;

        case 6:
          this.velocity = in.readDouble();
          break;

        case 7:
          this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










