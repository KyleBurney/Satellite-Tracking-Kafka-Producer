/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.satellite.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SatellitePassEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -329850690366874011L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SatellitePassEvent\",\"namespace\":\"com.satellite.avro\",\"fields\":[{\"name\":\"satelliteId\",\"type\":\"string\"},{\"name\":\"satelliteName\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"observerLatitude\",\"type\":\"double\"},{\"name\":\"observerLongitude\",\"type\":\"double\"},{\"name\":\"startTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"endTime\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"maxElevation\",\"type\":\"double\"},{\"name\":\"startAzimuth\",\"type\":\"double\"},{\"name\":\"endAzimuth\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SatellitePassEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SatellitePassEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SatellitePassEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SatellitePassEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SatellitePassEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SatellitePassEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SatellitePassEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SatellitePassEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SatellitePassEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence satelliteId;
  private java.lang.CharSequence satelliteName;
  private long timestamp;
  private double observerLatitude;
  private double observerLongitude;
  private long startTime;
  private long endTime;
  private double maxElevation;
  private double startAzimuth;
  private double endAzimuth;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SatellitePassEvent() {}

  /**
   * All-args constructor.
   * @param satelliteId The new value for satelliteId
   * @param satelliteName The new value for satelliteName
   * @param timestamp The new value for timestamp
   * @param observerLatitude The new value for observerLatitude
   * @param observerLongitude The new value for observerLongitude
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   * @param maxElevation The new value for maxElevation
   * @param startAzimuth The new value for startAzimuth
   * @param endAzimuth The new value for endAzimuth
   */
  public SatellitePassEvent(java.lang.CharSequence satelliteId, java.lang.CharSequence satelliteName, java.lang.Long timestamp, java.lang.Double observerLatitude, java.lang.Double observerLongitude, java.lang.Long startTime, java.lang.Long endTime, java.lang.Double maxElevation, java.lang.Double startAzimuth, java.lang.Double endAzimuth) {
    this.satelliteId = satelliteId;
    this.satelliteName = satelliteName;
    this.timestamp = timestamp;
    this.observerLatitude = observerLatitude;
    this.observerLongitude = observerLongitude;
    this.startTime = startTime;
    this.endTime = endTime;
    this.maxElevation = maxElevation;
    this.startAzimuth = startAzimuth;
    this.endAzimuth = endAzimuth;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return satelliteId;
    case 1: return satelliteName;
    case 2: return timestamp;
    case 3: return observerLatitude;
    case 4: return observerLongitude;
    case 5: return startTime;
    case 6: return endTime;
    case 7: return maxElevation;
    case 8: return startAzimuth;
    case 9: return endAzimuth;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: satelliteId = (java.lang.CharSequence)value$; break;
    case 1: satelliteName = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: observerLatitude = (java.lang.Double)value$; break;
    case 4: observerLongitude = (java.lang.Double)value$; break;
    case 5: startTime = (java.lang.Long)value$; break;
    case 6: endTime = (java.lang.Long)value$; break;
    case 7: maxElevation = (java.lang.Double)value$; break;
    case 8: startAzimuth = (java.lang.Double)value$; break;
    case 9: endAzimuth = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'satelliteId' field.
   * @return The value of the 'satelliteId' field.
   */
  public java.lang.CharSequence getSatelliteId() {
    return satelliteId;
  }


  /**
   * Sets the value of the 'satelliteId' field.
   * @param value the value to set.
   */
  public void setSatelliteId(java.lang.CharSequence value) {
    this.satelliteId = value;
  }

  /**
   * Gets the value of the 'satelliteName' field.
   * @return The value of the 'satelliteName' field.
   */
  public java.lang.CharSequence getSatelliteName() {
    return satelliteName;
  }


  /**
   * Sets the value of the 'satelliteName' field.
   * @param value the value to set.
   */
  public void setSatelliteName(java.lang.CharSequence value) {
    this.satelliteName = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'observerLatitude' field.
   * @return The value of the 'observerLatitude' field.
   */
  public double getObserverLatitude() {
    return observerLatitude;
  }


  /**
   * Sets the value of the 'observerLatitude' field.
   * @param value the value to set.
   */
  public void setObserverLatitude(double value) {
    this.observerLatitude = value;
  }

  /**
   * Gets the value of the 'observerLongitude' field.
   * @return The value of the 'observerLongitude' field.
   */
  public double getObserverLongitude() {
    return observerLongitude;
  }


  /**
   * Sets the value of the 'observerLongitude' field.
   * @param value the value to set.
   */
  public void setObserverLongitude(double value) {
    this.observerLongitude = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public long getStartTime() {
    return startTime;
  }


  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public long getEndTime() {
    return endTime;
  }


  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(long value) {
    this.endTime = value;
  }

  /**
   * Gets the value of the 'maxElevation' field.
   * @return The value of the 'maxElevation' field.
   */
  public double getMaxElevation() {
    return maxElevation;
  }


  /**
   * Sets the value of the 'maxElevation' field.
   * @param value the value to set.
   */
  public void setMaxElevation(double value) {
    this.maxElevation = value;
  }

  /**
   * Gets the value of the 'startAzimuth' field.
   * @return The value of the 'startAzimuth' field.
   */
  public double getStartAzimuth() {
    return startAzimuth;
  }


  /**
   * Sets the value of the 'startAzimuth' field.
   * @param value the value to set.
   */
  public void setStartAzimuth(double value) {
    this.startAzimuth = value;
  }

  /**
   * Gets the value of the 'endAzimuth' field.
   * @return The value of the 'endAzimuth' field.
   */
  public double getEndAzimuth() {
    return endAzimuth;
  }


  /**
   * Sets the value of the 'endAzimuth' field.
   * @param value the value to set.
   */
  public void setEndAzimuth(double value) {
    this.endAzimuth = value;
  }

  /**
   * Creates a new SatellitePassEvent RecordBuilder.
   * @return A new SatellitePassEvent RecordBuilder
   */
  public static com.satellite.avro.SatellitePassEvent.Builder newBuilder() {
    return new com.satellite.avro.SatellitePassEvent.Builder();
  }

  /**
   * Creates a new SatellitePassEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SatellitePassEvent RecordBuilder
   */
  public static com.satellite.avro.SatellitePassEvent.Builder newBuilder(com.satellite.avro.SatellitePassEvent.Builder other) {
    if (other == null) {
      return new com.satellite.avro.SatellitePassEvent.Builder();
    } else {
      return new com.satellite.avro.SatellitePassEvent.Builder(other);
    }
  }

  /**
   * Creates a new SatellitePassEvent RecordBuilder by copying an existing SatellitePassEvent instance.
   * @param other The existing instance to copy.
   * @return A new SatellitePassEvent RecordBuilder
   */
  public static com.satellite.avro.SatellitePassEvent.Builder newBuilder(com.satellite.avro.SatellitePassEvent other) {
    if (other == null) {
      return new com.satellite.avro.SatellitePassEvent.Builder();
    } else {
      return new com.satellite.avro.SatellitePassEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for SatellitePassEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SatellitePassEvent>
    implements org.apache.avro.data.RecordBuilder<SatellitePassEvent> {

    private java.lang.CharSequence satelliteId;
    private java.lang.CharSequence satelliteName;
    private long timestamp;
    private double observerLatitude;
    private double observerLongitude;
    private long startTime;
    private long endTime;
    private double maxElevation;
    private double startAzimuth;
    private double endAzimuth;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.satellite.avro.SatellitePassEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.satelliteId)) {
        this.satelliteId = data().deepCopy(fields()[0].schema(), other.satelliteId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.satelliteName)) {
        this.satelliteName = data().deepCopy(fields()[1].schema(), other.satelliteName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.observerLatitude)) {
        this.observerLatitude = data().deepCopy(fields()[3].schema(), other.observerLatitude);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.observerLongitude)) {
        this.observerLongitude = data().deepCopy(fields()[4].schema(), other.observerLongitude);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.startTime)) {
        this.startTime = data().deepCopy(fields()[5].schema(), other.startTime);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.endTime)) {
        this.endTime = data().deepCopy(fields()[6].schema(), other.endTime);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.maxElevation)) {
        this.maxElevation = data().deepCopy(fields()[7].schema(), other.maxElevation);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.startAzimuth)) {
        this.startAzimuth = data().deepCopy(fields()[8].schema(), other.startAzimuth);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.endAzimuth)) {
        this.endAzimuth = data().deepCopy(fields()[9].schema(), other.endAzimuth);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing SatellitePassEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.satellite.avro.SatellitePassEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.satelliteId)) {
        this.satelliteId = data().deepCopy(fields()[0].schema(), other.satelliteId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.satelliteName)) {
        this.satelliteName = data().deepCopy(fields()[1].schema(), other.satelliteName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.observerLatitude)) {
        this.observerLatitude = data().deepCopy(fields()[3].schema(), other.observerLatitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.observerLongitude)) {
        this.observerLongitude = data().deepCopy(fields()[4].schema(), other.observerLongitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTime)) {
        this.startTime = data().deepCopy(fields()[5].schema(), other.startTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.endTime)) {
        this.endTime = data().deepCopy(fields()[6].schema(), other.endTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.maxElevation)) {
        this.maxElevation = data().deepCopy(fields()[7].schema(), other.maxElevation);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.startAzimuth)) {
        this.startAzimuth = data().deepCopy(fields()[8].schema(), other.startAzimuth);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.endAzimuth)) {
        this.endAzimuth = data().deepCopy(fields()[9].schema(), other.endAzimuth);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'satelliteId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSatelliteId() {
      return satelliteId;
    }


    /**
      * Sets the value of the 'satelliteId' field.
      * @param value The value of 'satelliteId'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setSatelliteId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.satelliteId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'satelliteId' field has been set.
      * @return True if the 'satelliteId' field has been set, false otherwise.
      */
    public boolean hasSatelliteId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'satelliteId' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearSatelliteId() {
      satelliteId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'satelliteName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSatelliteName() {
      return satelliteName;
    }


    /**
      * Sets the value of the 'satelliteName' field.
      * @param value The value of 'satelliteName'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setSatelliteName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.satelliteName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'satelliteName' field has been set.
      * @return True if the 'satelliteName' field has been set, false otherwise.
      */
    public boolean hasSatelliteName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'satelliteName' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearSatelliteName() {
      satelliteName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'observerLatitude' field.
      * @return The value.
      */
    public double getObserverLatitude() {
      return observerLatitude;
    }


    /**
      * Sets the value of the 'observerLatitude' field.
      * @param value The value of 'observerLatitude'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setObserverLatitude(double value) {
      validate(fields()[3], value);
      this.observerLatitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'observerLatitude' field has been set.
      * @return True if the 'observerLatitude' field has been set, false otherwise.
      */
    public boolean hasObserverLatitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'observerLatitude' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearObserverLatitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'observerLongitude' field.
      * @return The value.
      */
    public double getObserverLongitude() {
      return observerLongitude;
    }


    /**
      * Sets the value of the 'observerLongitude' field.
      * @param value The value of 'observerLongitude'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setObserverLongitude(double value) {
      validate(fields()[4], value);
      this.observerLongitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'observerLongitude' field has been set.
      * @return True if the 'observerLongitude' field has been set, false otherwise.
      */
    public boolean hasObserverLongitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'observerLongitude' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearObserverLongitude() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public long getStartTime() {
      return startTime;
    }


    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setStartTime(long value) {
      validate(fields()[5], value);
      this.startTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearStartTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public long getEndTime() {
      return endTime;
    }


    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setEndTime(long value) {
      validate(fields()[6], value);
      this.endTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearEndTime() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxElevation' field.
      * @return The value.
      */
    public double getMaxElevation() {
      return maxElevation;
    }


    /**
      * Sets the value of the 'maxElevation' field.
      * @param value The value of 'maxElevation'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setMaxElevation(double value) {
      validate(fields()[7], value);
      this.maxElevation = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'maxElevation' field has been set.
      * @return True if the 'maxElevation' field has been set, false otherwise.
      */
    public boolean hasMaxElevation() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'maxElevation' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearMaxElevation() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'startAzimuth' field.
      * @return The value.
      */
    public double getStartAzimuth() {
      return startAzimuth;
    }


    /**
      * Sets the value of the 'startAzimuth' field.
      * @param value The value of 'startAzimuth'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setStartAzimuth(double value) {
      validate(fields()[8], value);
      this.startAzimuth = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'startAzimuth' field has been set.
      * @return True if the 'startAzimuth' field has been set, false otherwise.
      */
    public boolean hasStartAzimuth() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'startAzimuth' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearStartAzimuth() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'endAzimuth' field.
      * @return The value.
      */
    public double getEndAzimuth() {
      return endAzimuth;
    }


    /**
      * Sets the value of the 'endAzimuth' field.
      * @param value The value of 'endAzimuth'.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder setEndAzimuth(double value) {
      validate(fields()[9], value);
      this.endAzimuth = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'endAzimuth' field has been set.
      * @return True if the 'endAzimuth' field has been set, false otherwise.
      */
    public boolean hasEndAzimuth() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'endAzimuth' field.
      * @return This builder.
      */
    public com.satellite.avro.SatellitePassEvent.Builder clearEndAzimuth() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SatellitePassEvent build() {
      try {
        SatellitePassEvent record = new SatellitePassEvent();
        record.satelliteId = fieldSetFlags()[0] ? this.satelliteId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.satelliteName = fieldSetFlags()[1] ? this.satelliteName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.observerLatitude = fieldSetFlags()[3] ? this.observerLatitude : (java.lang.Double) defaultValue(fields()[3]);
        record.observerLongitude = fieldSetFlags()[4] ? this.observerLongitude : (java.lang.Double) defaultValue(fields()[4]);
        record.startTime = fieldSetFlags()[5] ? this.startTime : (java.lang.Long) defaultValue(fields()[5]);
        record.endTime = fieldSetFlags()[6] ? this.endTime : (java.lang.Long) defaultValue(fields()[6]);
        record.maxElevation = fieldSetFlags()[7] ? this.maxElevation : (java.lang.Double) defaultValue(fields()[7]);
        record.startAzimuth = fieldSetFlags()[8] ? this.startAzimuth : (java.lang.Double) defaultValue(fields()[8]);
        record.endAzimuth = fieldSetFlags()[9] ? this.endAzimuth : (java.lang.Double) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SatellitePassEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<SatellitePassEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SatellitePassEvent>
    READER$ = (org.apache.avro.io.DatumReader<SatellitePassEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.satelliteId);

    out.writeString(this.satelliteName);

    out.writeLong(this.timestamp);

    out.writeDouble(this.observerLatitude);

    out.writeDouble(this.observerLongitude);

    out.writeLong(this.startTime);

    out.writeLong(this.endTime);

    out.writeDouble(this.maxElevation);

    out.writeDouble(this.startAzimuth);

    out.writeDouble(this.endAzimuth);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.satelliteId = in.readString(this.satelliteId instanceof Utf8 ? (Utf8)this.satelliteId : null);

      this.satelliteName = in.readString(this.satelliteName instanceof Utf8 ? (Utf8)this.satelliteName : null);

      this.timestamp = in.readLong();

      this.observerLatitude = in.readDouble();

      this.observerLongitude = in.readDouble();

      this.startTime = in.readLong();

      this.endTime = in.readLong();

      this.maxElevation = in.readDouble();

      this.startAzimuth = in.readDouble();

      this.endAzimuth = in.readDouble();

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.satelliteId = in.readString(this.satelliteId instanceof Utf8 ? (Utf8)this.satelliteId : null);
          break;

        case 1:
          this.satelliteName = in.readString(this.satelliteName instanceof Utf8 ? (Utf8)this.satelliteName : null);
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.observerLatitude = in.readDouble();
          break;

        case 4:
          this.observerLongitude = in.readDouble();
          break;

        case 5:
          this.startTime = in.readLong();
          break;

        case 6:
          this.endTime = in.readLong();
          break;

        case 7:
          this.maxElevation = in.readDouble();
          break;

        case 8:
          this.startAzimuth = in.readDouble();
          break;

        case 9:
          this.endAzimuth = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










